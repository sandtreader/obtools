#===========================================================================
# Tuprules.tup for ObTools build system
#
# Copyright (c) 2016 Paul Clark. All rights reserved
#===========================================================================

# Tools
COMPILER = clang++
ARCHIVER = ar
LINKER = $(COMPILER)

# Basic compiler options
CFLAGS += --std=c++11 -pedantic -Wall -Wextra -Werror -fPIC
LFLAGS += --std=c++11

# Debug settings
ifdef DEBUG
  CFLAGS += -ggdb3 -DDEBUG
endif

# Thread safety settings
ifdef DEBUGTHREAD
  CFLAGS += -ggdb3 -O2 -fsanitize=thread
  LFLAGS += -fsanitize=thread
endif

# Profiling settings
ifdef PROFILE
  CFLAGS += -ggdb3 -O2
endif

# Release settings
ifdef RELEASE
  CFLAGS += -O2
  LFLAGS += -s
endif

# Version
ifneq ($(VERSION)empty,empty)
  ifdef DEBUG
    CFLAGS += -DVERSION='"$(VERSION) (debug)"'
  else
    ifdef PROFILE
      CFLAGS += -DVERSION='"$(VERSION) (profile)"'
    else
      CFLAGS += -DVERSION='"$(VERSION)"'
    endif
  endif
endif

PACKAGEDIR=DEBIAN

# Get sources variables
# SOURCES, TESTSOURCES
include Tupsources.lua

# Get dependency variables
# DEPINCLUDES, DEPLIBS, DEPARCHIVES, DEPGROUPS
include Tupdepends.lua

# Define commands
TUP_TOP=$(TUP_CWD)
!cc = |> ^ CC %f^ $(COMPILER) $(CFLAGS) $(DEPINCLUDES) -c %f -o %o |> %F.o
!liblink = |> ^ AR %o^ $(ARCHIVER) crs %o %f |> $(NAME).a <$(NAME)>
!sharedlink = |> ^ LINK %o^ $(LINKER) $(LFLAGS) %f -Wl,-\( $(DEPARCHIVES) -Wl,-\) -Wl,--as-needed $(DEPLIBS) -shared -rdynamic -o %o |> $(NAME).so <$(NAME)>
!exelink = |> ^ LINK %o^ $(LINKER) $(LFLAGS) %f -Wl,-\( $(DEPARCHIVES) -Wl,-\) -Wl,--as-needed $(DEPLIBS) -o %o |> $(NAME) <$(NAME)>
!libtestlink = |> ^ LINK %o^ $(LINKER) $(LFLAGS) %f %<$(NAME)> -Wl,-\( $(DEPARCHIVES) -Wl,-\) -Wl,--as-needed $(DEPLIBS) -lgtest -lpthread -o %o |> %F
!exetestlink = |> ^ LINK %o^ $(LINKER) $(LFLAGS) %f %<$(NAME)-non-main> -Wl,-\( $(DEPARCHIVES) -Wl,-\) -Wl,--as-needed $(DEPLIBS) -lgtest -lpthread -o %o |> %F
!runtest = |> ^ TEST %f^ ./%f |>
!package = |> ^ PACKAGE %o^ $(TUP_TOP)/create-deb.sh $(PACKAGE) $(VERSION) $(REVISION) $(ARCH) |> $(PACKAGE)_$(VERSION)-$(REVISION)_$(ARCH).deb

# Let's build!
: foreach $(SOURCES) |> !cc |> | <$(NAME)-non-main> {objs}
ifeq ($(TYPE),lib)
  : {objs} | $(DEPGROUPS) |> !liblink |> {lib}
endif
ifeq ($(TYPE),shared)
  : {objs} | $(DEPGROUPS) |> !sharedlink |> {shared}
endif
ifeq ($(TYPE),exe)
  : main.cc |> !cc |> {objs}
  : {objs} $(EXTRAOBJS) | $(DEPGROUPS) |> !exelink |> {exe}
endif

ifdef TEST
  : foreach $(TESTSOURCES) |> !cc |> {testobjs}
  # It's much quicker to link against a .a rather than all the .o files, so
  # optimise for libs
  ifeq ($(TYPE),lib)
    : foreach {testobjs} | <$(NAME)> $(DEPGROUPS) |> !libtestlink |> {tests}
  else
    : foreach {testobjs} | <$(NAME)-non-main> $(DEPGROUPS) |> !exetestlink |> {tests}
  endif
  : foreach {tests} | $(TESTRUNDEPS) |> !runtest |>
endif

ifdef RELEASE
  ifeq ($(ARCH)empty,empty)
    ARCH = @(ARCH)
  endif
  ifneq ($(PACKAGE)empty,empty)
    : foreach $(PACKAGEDIR)/* |> |> <PACKAGE-FILES>
    ifeq ($(NAME)empty,empty)
      : <PACKAGE-FILES> | $(DEPGROUPS) |> !package |>
    else
      : <PACKAGE-FILES> | <$(NAME)> $(DEPGROUPS) |> !package |>
    endif
  endif
endif
