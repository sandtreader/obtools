ObTools build notes
-------------------

Cross-compilation
-----------------

Currently uses mingw to cross compile from Linux onto Windows.  Not tested
compiling natively on Windows under MinGW or commercial IDEs.  There are some 
remnant borland.mak files for libraries lying around, but these are 
seriously out of date.

To install MinGW under Debian:

# apt-get install mingw32

To build cross-compiled versions

$ make cross

The mingw10.dll needs to be copied into the same location as executables.

Threads in cross-compiled versions
----------------------------------

To build the MT threaded code (that is, most of it!), you need the 
'pthreads-win32' packages from 

ftp://sources.redhat.com/pub/pthreads-win32/dll-latest

We use the GC version - Gnu compiler, no exception handling (we don't 
expect C++ EH in thread cancellation in libpthread, so no reason to expect
it here either).  So...

1) Copy {pthread,semaphore,sched}.h to /usr/lib/gcc/i586-mingw32msvc/3.4.5/include/
(your version may vary)

2) Copy libpthreadGC2.a to /usr/lib/gcc/i586-mingw32msvc/3.4.5/

3) Copy pthreadGC2.dll to Windows PATH

Crypto/SSL in cross-compiled versions
-------------------------------------

To build with the OpenSSL library, you need to cross-link the usual OpenSSL
headers into the MinGW include directory:

ln -sf /usr/include/openssl /usr/i586-mingwmsvc/include/

Prebuilt OpenSSL DLLs are available from:

http://www.slproweb.com/products/Win32OpenSSL.html

Copy the libeay32.a and ssleay32.a import library to /usr/i586-mingwmsvc/lib/
to allow the DLL build to use it

Postgres in cross-compiled versions
-----------------------------------

To build with the Postgres library, you don't need to cross link because the 
build takes the headers from the Unix place anyway.  

Download the PQ DLL and implib from:

ftp://gborg.postgresql.org/pub/oledb/stable/libpq-7.4.1.zip

and copy libpqdll.lib to /usr/i586-mingwmsvc/lib/libpq.a

Install the DLL in c:\windows\system or wherever


