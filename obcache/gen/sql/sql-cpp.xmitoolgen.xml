<?xml version="1.0"?>
<!-- ================================================================ -->
<!-- XMLToolGen configuration file for ObCache SQL 1-table-per-class  -->
<!-- storage object header                                            -->
<!--                                                                  -->
<!-- Copyright (c) 2008 xMill Consulting Limited                      -->
<!-- ================================================================ -->

<xt:tool xmlns:xt="obtools.com/ns/tools">

  <!-- Legal info transferred into header - note xmitoolgen will also
  apply its own copyright and license for portions generated solely by it -->
  <xt:legal>
    // XMI Tool configuration for ObCache SQL Schema
    // Copyright (c) 2008 xMill Consulting Limited
    // @@@ MASTER SOURCE - PROPRIETARY AND CONFIDENTIAL - NO LICENCE GRANTED
  </xt:legal>

  <!-- ===== Setup of script processing for rest of file ===== -->
  <xt:script language="C++">
    <!-- Tags to support C++ in XML - $ isn't significant to either -->
    <xt:tags>
      <xt:start-code>$(</xt:start-code>
      <xt:end-code>)$</xt:end-code>
      <xt:start-expr>$=</xt:start-expr>
      <xt:end-expr>=$</xt:end-expr>
    </xt:tags>
  </xt:script>

  <!-- ===== Configuration items for tool ===== -->
  <xt:config file="/etc/obtools/ot-generate-sql-cpp.cfg.xml" 
             root="sql-cpp">
    <xt:map name="typemap" path="typemap/type"/>
  </xt:config>

  <!-- =============== Helper code =================  -->
  <xt:code>
    // Helper to manufacture association links for many-1 associations
    string many_to_one_ref(ObTools::UML::AssociationEnd& a)
    {
      if (!a.is_navigable) return "";

      ObTools::UML::AssociationEnd *other = a.get_other_end();
      ObTools::UML::Association *assoc = a.get_association();

      string type = other->participant->name;

      // Get name - best of: role, association name, referent type
      string name = other->name;  
      if (name.empty()) name = assoc->name;  
      if (name.empty()) name = type;
      name = Text::tolower(name);  // Ensure lc variable

      if (other->multiplicity.upper == 1)
        return "a_"+name+" INTEGER, -- Many to 1 "+type;
      else
	return "";
    }

  </xt:code>

  <!-- =============== Main templates =================  -->
     
  <!-- ------------------------------------------------- -->
  <!-- Template for header files -->
  <xt:define name="Headers" scope="class" var="cl">

    <xt:file>$= cl.name =$_sql.h</xt:file>
    // =================================================
    //  Class $=cl.name=$ SQL storage
    class $= cl.name =$_Storage
    {
      -- Attributes
      <xt:template scope="attribute">
	$= _config.typemap.get(a.type->name, "???") =$ $= a.name =$;
      </xt:template>

      -- Associations
      <xt:template scope="association_end">
      $= many_to_one_ref(a) =$
      </xt:template>
    };
  </xt:define>

  <!-- ------------------------------------------------- -->
  <!-- Top-level model template -->
  <xt:template name="Model" scope="model">
    <!-- Create header files -->
    <xt:use template="Headers"/>

    <!-- Template for Makefile, all in one file -->
    <xt:file>sql.mk</xt:file>
    # Makefile for package $= m.name =$ SQL classes
    # Autogenerated by ot-generate-sql-cpp
    # DO NOT EDIT!

  </xt:template>

<!-- === end ===  -->
</xt:tool>  

