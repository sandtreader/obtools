<?xml version="1.0"?>
<!--
  Copyright (c) 2003 Paul Clark
  This code comes with NO WARRANTY and is subject to licence agreement
-->

<xt:tool xmlns:xt="obtools.com/ns/xmitool">
  <!-- Legal info transferred into header - note xmitoolgen will also
  apply its own copyright and license for portions generated solely by it -->
  <xt:legal>
// Sample XMITool configuration
// Copyright (c) 2003 Paul Clark
// This code comes with NO WARRANTY and is subject to licence agreement
  </xt:legal>

  <!-- Setup of script processing for rest of file -->
  <xt:script language="C++">
    <!-- Tags to support C++ in XML - $ isn't significant to either -->
    <xt:tags>
      <xt:start-code>$(</xt:start-code>
      <xt:end-code>)$</xt:end-code>
      <xt:start-expr>$=</xt:start-expr>
      <xt:end-expr>=$</xt:end-expr>
    </xt:tags>
  </xt:script>

  <!-- Config items for tool -->
  <xt:config file="xmi2cc.cfg.xml" root="xmicc">
    <xt:map name="typemap" path="sql/type"/>
    <xt:var name="association_type" path="association/@type" default="list"/>
    <xt:var name="overwrite" path="overwrite/@files" type="bool"/>
  </xt:config>

  <!-- Support code to be added to tool -->
  <xt:code>
    //Routine to return method signature of operation
    //full - for code;  not full - for regen marker
    string xmicc_op_sig(ObTools::UML::Operation& op, bool full=false)
    {
      string s;
      if (full)
      {
        ObTools::UML::Parameter *ret = op.get_return();
        if (ret)
          s = ret->type->name;
        else
          s= "void";
       
        s += " ";
      }
      s += op.name;
      s += "(";

      int i=0;
      OBTOOLS_UML_FOREACH_PARAMETER(p, op)
        if (i++) s+=", ";
        s+=p.type->name;
	if (full)
        {
          s+=" ";
	  s+=p.name;
        }
      OBTOOLS_UML_ENDFOR

      s+=")";
      return s;
    }

    //Routine to return pointer/list members for association ends
    string xmicc_assoc_end(ObTools::UML::AssociationEnd& a)
    {
      if (!a.is_navigable) return "";

      ObTools::UML::AssociationEnd *other = a.get_other_end();
      ObTools::UML::Association *assoc = a.get_association();

      string type = other->participant->name;
      // Get name - best of: role, association name, referent type
      string name = other->name;  
      if (other->name.empty()) name = assoc->name;  
      if (other->name.empty()) name = type;
      name[0] = tolower(name[0]);  // Ensure lc variable

      if (other->multiplicity.upper == 1)
        return type + " *" + name;
      else
	return _config.association_type+"<" + type + " *> " + name +"s"; 
    }
  </xt:code>

  <!-- Recursive 'macro' template for packages -->
  <xt:define name="Package" scope="package">
    <xt:dir>$=p.name=$</xt:dir>

    Building package $= p.name =$

    <!-- Recurse to sub-packages -->
    <xt:use template="Package"/>

    <!-- C++ implementation output -->
    <xt:template name = "C++ implementation" scope="class" var="myclass">
      <xt:file>$=myclass.name=$.cc</xt:file>
      // Automatically generated code by xmi2cc
      // $=myclass.name=$.cc

      #include "$=myclass.name=$.h"
      <xt:template name= "Method implementation" scope="operation">

      //---------------------------------------------------------
      //~[ Method $= xmicc_op_sig(o) =$
      $= xmicc_op_sig(o, true) =$
      {
        //~^ ----- Manual implementation -----

        //v~ ---------------------------------
      }
      //~]
      </xt:template>
    </xt:template>

    <!-- C++ header output -->
    <xt:template name = "C++ header" scope="class">
      <xt:file>$= c.name =$.h</xt:file>
      // Automatically generated code by xmi2cc
      // $= c.name =$.h

      //---------------------------------------------------------
      //~[ class $= c.name =$

      class $= c.name =$
      <xt:template name = "Inheritance" scope="generalization">
	$= (g_index?",":":") =$$= g.gparent->name =$
      </xt:template>
      {
      private:
      <xt:template name = "Private attribute declaration" scope="attribute" 
		visibility="private">
        $= a.type->name =$ $= a.name =$;
      </xt:template>

      <xt:template name = "Private associations" scope="association_end" 
		visibility="private">
        $= xmicc_assoc_end(a) =$;
      </xt:template>

        //~^ ----- Manually added private methods ------


        //~v -------------------------------------------

      public:
      <xt:template name = "Public method declaration" scope="operation" 
                visibility="public">
        $= xmicc_op_sig(o) =$;
      </xt:template>
      };
      //~]
    </xt:template>
  </xt:define>

  <!-- Template for top-level model -->
  <xt:template name="Model" scope="model">
    xmi2cc test tool

    Configuration:
      Association type: $= _config.association_type =$
      Overwrite: $= _config.overwrite?"yes":"no" =$
      Type map:
    $( _config.typemap.dump(cout); )$

    <!-- Use recursive package macro on top-level model -->
    <xt:use template="Package"/>
  </xt:template>

</xt:tool>  







