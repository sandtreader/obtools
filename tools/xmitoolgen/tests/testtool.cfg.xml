<?xml version="1.0"?>
<!--
  Copyright (c) 2003 xMill Consulting Limited

* NOTE:  This file is unusually provided under an 'MIT'-style licence    * 
* (see <legal> below) to allow use of GENERATED CODE ONLY in proprietary *
* (closed-source) projects.                                              * 
* Most ObTools code is provided under GPL - see source for details       *

-->

<xmitool xmlns="obtools.com/ns/xmitool">
  <!-- Legal info transferred into header - note xmitoolgen will also
  apply its own copyright and license for portions generated solely by it -->
  <legal>
// Sample XMITool configuration
// Copyright (c) 2003 xMill Consulting Limited
 
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  </legal>

  <!-- Setup of script processing for rest of file -->
  <script language="C++">
    <!-- Tags to support C++ in XML - $ isn't significant to either -->
    <tags>
      <start-code>$(</start-code>
      <end-code>)$</end-code>
      <start-expr>$=</start-expr>
      <end-expr>=$</end-expr>
    </tags>
  </script>

  <!-- Support code to be added to tool -->
  <code>
    //Routine to return method signature of operation
    //full - for code;  not full - for regen marker
    string xmicc_op_sig(ObTools::UML::Operation&amp; op, bool full=false)
    {
      string s;
      if (full)
      {
        ObTools::UML::Parameter *ret = op.get_return();
        if (ret)
          s = ret->type->name;
        else
          s= "void";
       
        s += " ";
      }
      s += op.name;
      s += "(";

      int i=0;
      OBTOOLS_UML_FOREACH_PARAMETER(p, op)
        if (i++) s+=", ";
        s+=p.type->name;
	if (full)
        {
          s+=" ";
	  s+=p.name;
        }
      OBTOOLS_UML_ENDFOR

      s+=")";
      return s;
    }

    //Routine to return pointer/list members for association ends
    string xmicc_assoc_end(ObTools::UML::AssociationEnd&amp; a)
    {
      if (!a.is_navigable) return "";

      ObTools::UML::AssociationEnd *other = a.get_other_end();
      ObTools::UML::Association *assoc = a.get_association();

      string type = other->participant->name;
      // Get name - best of: role, association name, referent type
      string name = other->name;  
      if (other->name.empty()) name = assoc->name;  
      if (other->name.empty()) name = type;
      name[0] = tolower(name[0]);  // Ensure lc variable

      if (other->multiplicity.upper == 1)
        return type + " *" + name;
      else
	return "list&lt;" + type + " *> " + name +"s"; 
    }
  </code>

  <!-- Config items for tool -->
  <config file="xmi2cc.cfg.xml">
    <map name="typemap" path="types/map"/>
    <var name="association_type" path="association-type"/>
    <var name="overwrite" path="overwrite" type="bool"/>
  </config>

  <template name="Package directories" scope="rpackage">
    <directory>$=p.name=$</directory>

    <!-- C++ implementation output -->
    <template name = "C++ implementation" scope="class" var="myclass">
      <filename>$=myclass.name=$.cc</filename>
      // Automatically generated code by xmi2cc
      // $=myclass.name=$.cc

      #include "$=myclass.name=$.h"
      <template name= "Method implementation" scope="operation">

      //---------------------------------------------------------
      //~[ Method $= xmicc_op_sig(o) =$
      $= xmicc_op_sig(o, true) =$
      {
        //~^ ----- Manual implementation -----

        //v~ ---------------------------------
      }
      //~]
      </template>
    </template>

    <!-- C++ header output -->
    <template name = "C++ header" scope="class">
      <filename>$= c.name =$.h</filename>
      // Automatically generated code by xmi2cc
      // $= c.name =$.h

      //---------------------------------------------------------
      //~[ class $= c.name =$

      class $= c.name =$
      <template name = "Inheritance" scope="generalization">
	$= (index?",":":") =$$= g.gparent->name =$
      </template>
      {
      private:
      <template name = "Private attribute declaration" scope="attribute" 
		visibility="private">
        $= a.type->name =$ $= a.name =$;
      </template>

      <template name = "Private associations" scope="association_end" 
		visibility="private">
        $= xmicc_assoc_end(a) =$;
      </template>

        //~^ ----- Manually added private methods ------


        //~v -------------------------------------------

      public:
      <template name = "Public method declaration" scope="operation" 
                visibility="public">
        $= xmicc_op_sig(o) =$;
      </template>
      };
      //~]
    </template>
  </template>
</xmitool>  







